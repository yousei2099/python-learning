
在 Python 中，`@` 符号有几个主要用法：

1. **装饰器（Decorators）**：
   - 装饰器是一个函数，它可以在其他函数定义时修改或增强这些函数的行为。你使用 `@decorator_name` 语法来应用装饰器。例如：
     ```python
     def my_decorator(func):
         def wrapper():
             print("Something is happening before the function is called.")
             func()
             print("Something is happening after the function is called.")
         return wrapper

     @my_decorator
     def say_hello():
         print("Hello!")

     say_hello()
     ```
     上面的代码中，`@my_decorator` 是装饰器，它在 `say_hello` 函数前后执行一些额外的代码。

2. **类方法和静态方法（Class Methods and Static Methods）**：
   - `@classmethod` 和 `@staticmethod` 是类装饰器，用于定义类方法和静态方法。例如：
     ```python
     class MyClass:
         @classmethod
         def class_method(cls):
             print("This is a class method.")

         @staticmethod
         def static_method():
             print("This is a static method.")
     ```

3. **属性装饰器（Property Decorators）**：
   - `@property` 用于将方法定义为属性，这样你可以像访问属性一样访问方法。例如：
     ```python
     class MyClass:
         def __init__(self, value):
             self._value = value

         @property
         def value(self):
             return self._value

         @value.setter
         def value(self, new_value):
             self._value = new_value
     ```

4. **其他装饰器（Other Decorators）**：
   - 除了常见的装饰器，还有一些其他库和框架可能会定义自己的装饰器。例如，Flask 和 Django 框架都有自己的装饰器。

这些用法中的每一个都可以帮助你写出更简洁和更易维护的代码。
